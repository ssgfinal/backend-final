<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ssg.com.houssg.dao.ReviewDao">
	<!-- 리뷰 추가하기 -->
	<insert id="addReview" parameterType="ssg.com.houssg.dto.ReviewDto">
	    INSERT INTO review(review_content,review_rating,review_creation_time,report_status, id, reservation_number,room_number,accom_number,img) 
	    VALUES (#{reviewContent}, #{reviewRating}, NOW() , 0, #{id},#{reservationNumber}, #{roomNumber}, #{accomNumber}, #{img})
	</insert>
	<!-- 나의 리뷰 보기 -->
	<select id="getMyReview" parameterType="ssg.com.houssg.dto.ReviewParam" resultType="ssg.com.houssg.dto.ReviewDto">
		SELECT r.review_number, r.review_content, r.review_rating, r.review_creation_time, r.review_comment, r.review_comment_time, r.img, r.manager_id, ro.room_category, ro.room_number, a.accom_number, a.accom_name, u.nickname
		FROM review r
		JOIN user u ON r.id = u.id
		JOIN rooms ro ON r.room_number = ro.room_number
		JOIN accommodation a ON r.accom_number = a.accom_number
		WHERE u.id = #{id} AND (r.report_status = 0 OR r.report_status = 1)
	</select>
	
	<select id="getMyReviewPage" parameterType="ssg.com.houssg.dto.ReviewParam" resultType="ssg.com.houssg.dto.ReviewDto">
		SELECT r.review_number, r.review_content, r.review_rating, r.review_creation_time, r.review_comment, r.review_comment_time, r.img, r.manager_id, ro.room_category, ro.room_number, a.accom_number, a.accom_name, u.nickname
		FROM review r
		JOIN user u ON r.id = u.id
		JOIN rooms ro ON r.room_number = ro.room_number
		JOIN accommodation a ON r.accom_number = a.accom_number
		WHERE u.id = #{id} AND (r.report_status = 0 OR r.report_status = 1)
		LIMIT #{pageSize} OFFSET #{start}
	</select>
	<!-- 나의 리뷰 숫자 -->
	<select id="reviewCount" parameterType="ssg.com.houssg.dto.ReviewParam" resultType="int">
		SELECT COUNT(DISTINCT a.accom_number) AS total_count
		FROM review r
		JOIN user u ON r.id = u.id
		JOIN rooms ro ON r.room_number = ro.room_number
		JOIN accommodation a ON r.accom_number = a.accom_number
		WHERE u.id = #{id} AND (r.report_status = 0 OR r.report_status = 1)
	</select>
	<!-- 숙소에 관한 리뷰보기 -->
	<select id="getAllReview" parameterType="java.lang.Integer" resultType="ssg.com.houssg.dto.ReviewDto">
	    SELECT r.review_number, r.review_content, r.review_rating, r.review_creation_time, r.review_comment, r.review_comment_time, r.img, r.manager_id, ro.room_category, ro.room_number, a.accom_name, u.nickname
	    FROM review r 
	    JOIN rooms ro ON r.room_number = ro.room_number
	    JOIN accommodation a ON r.accom_number = a.accom_number
	    JOIN user u ON r.id = u.id
	    WHERE r.accom_number = #{accomNumber} AND (r.report_status=0 OR r.report_status = 1)
	    ORDER BY r.review_creation_time DESC
	</select>
	<!-- 숙소에 관한 리뷰보기 -->
	<select id="getAllReviewPage" parameterType="ssg.com.houssg.dto.ReviewParam" resultType="ssg.com.houssg.dto.ReviewDto">
	    SELECT r.review_number, r.review_content, r.review_rating, r.review_creation_time, r.review_comment, r.review_comment_time, r.img, r.manager_id, ro.room_category, ro.room_number, a.accom_name, u.nickname
	    FROM review r 
	    JOIN rooms ro ON r.room_number = ro.room_number
	    JOIN accommodation a ON r.accom_number = a.accom_number
	    JOIN user u ON r.id = u.id
	    WHERE r.accom_number = #{accomNumber} AND (r.report_status=0 OR r.report_status = 1)
	    ORDER BY r.review_creation_time DESC
	    LIMIT #{pageSize} OFFSET #{start}
	</select>
	<!-- 숙소에 관한 리뷰보기 토탈값 -->
	<select id="pageTotal" parameterType="ssg.com.houssg.dto.ReviewParam" resultType="int">
	    SELECT COUNT(DISTINCT a.accom_number) AS total_count
	    FROM review r 
	    JOIN rooms ro ON r.room_number = ro.room_number
	    JOIN accommodation a ON r.accom_number = a.accom_number
	    JOIN user u ON r.id = u.id
	    WHERE r.accom_number = #{accomNumber} AND (r.report_status=0 OR r.report_status = 1)
	</select>
	<!-- 리뷰 신고하기 -->
	<update id="updateReview" parameterType="ssg.com.houssg.dto.ReviewDto">
		UPDATE review 
		SET	report_status = 1,
			report_message = #{reportMessage}
		WHERE review_number=#{reviewNumber}
	</update>
	<!-- 리뷰 삭제하기 -->
	<delete id="deleteReview" parameterType="java.lang.Integer">
	    DELETE FROM review
	    WHERE review_number = #{reviewNumber} and report_status = 1
	</delete>
	<!-- 리뷰 신고한거보기 -->
	<select id="getAuthReview" resultType="ssg.com.houssg.dto.ReviewDto">
		SELECT *
		FROM review 
		WHERE report_status = 1
	</select>
	<!-- 리뷰 추가하기 -->
	<update id="addComment" parameterType="ssg.com.houssg.dto.ReviewDto">
	    UPDATE review AS r
	    INNER JOIN accommodation AS a ON r.accom_number = a.accom_number
	    SET r.review_comment = #{reviewComment},
	    	r.review_comment_time = now(),
	    	r.manager_id = a.id
	    WHERE r.review_number = #{reviewNumber}
	      AND r.accom_number = a.accom_number
	</update>
	<!-- 리뷰 수정하기 -->
	<update id="updateComment" parameterType="ssg.com.houssg.dto.ReviewDto">
	    UPDATE review AS r
	    INNER JOIN accommodation AS a ON r.accom_number = a.accom_number
	    SET r.review_comment = #{reviewComment},
		    r.review_comment_time = now()
	    WHERE r.review_number = #{reviewNumber}
	      AND r.accom_number = a.accom_number
	      AND r.manager_id = a.id
	</update>
	<!-- 예약에서 나의리뷰보기 -->
	<select id="reservationReview" parameterType="ssg.com.houssg.dto.ReviewDto" resultType="ssg.com.houssg.dto.ReviewDto">
		SELECT r.*, a.accom_name,ro.room_category
		FROM review r
		JOIN accommodation a ON a.accom_number = r.accom_number
		JOIN rooms ro ON ro.room_number = r.room_number
		WHERE r.id=#{id} AND r.reservation_number = #{reservationNumber}
	</select>
	
	<select id="reviewCheck" parameterType="ssg.com.houssg.dto.ReviewDto" resultType="int">
		SELECT CASE
	    WHEN EXISTS (
	        SELECT 1
	        FROM review
	        WHERE reservation_number = #{reservationNumber} AND accom_number = #{accomNumber}
	    )
	    THEN 1
	    ELSE 0
		END AS result;
	</select>
</mapper>