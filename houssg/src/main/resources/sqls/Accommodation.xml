<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ssg.com.houssg.dao.AccommodationDao">
	
	<select id="getAddressSearch" parameterType="ssg.com.houssg.dto.AccommodationParam" resultType="ssg.com.houssg.dto.AccommodationDto">
		SELECT a.accom_number, a.accom_name, a.accom_address, a.tele_number, a.accom_category, a.accom_details, a.check_in, a.check_out, a.business_number, a.id AS owner_id, a.img,
		    MIN(ro.room_price) AS min_price, 
		    IFNULL(r.review_count, 0) AS review_count,
		    IFNULL(r.avg_rating, 0.0) AS avg_rating
	    FROM accommodation a
	    JOIN rooms ro ON a.accom_number = ro.accom_number
		LEFT JOIN favorite f ON a.accom_number = f.accom_number
		LEFT JOIN (
		    SELECT accom_number, COUNT(*) AS review_count, ROUND(AVG(review_rating), 1) AS avg_rating
		    FROM review
		    GROUP BY accom_number
		) r ON a.accom_number = r.accom_number
	    WHERE ((a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0) 
	    AND ((REPLACE(TRIM(a.accom_name), ' ', '%') LIKE CONCAT('%', REPLACE(TRIM(#{search}), ' ', '%'), '%'))
		OR (REPLACE(TRIM(a.accom_address), ' ', '%') LIKE CONCAT('%', REPLACE(TRIM(#{search}), ' ', '%'), '%')))
	    GROUP BY a.accom_number
	    <if test="select == '평점 높은순'">
        	ORDER BY avg_rating DESC
	    </if>
	    <if test="select == '최근 등록순'">
	        ORDER BY a.accom_number DESC
	    </if>
	    <if test="select == '금액 높은순'">
	        ORDER BY min_price DESC
	    </if>
	    <if test="select == '금액 낮은순'">
	        ORDER BY min_price ASC
	    </if>
	    LIMIT #{pageSize} OFFSET #{start}
	</select>
	
	<select id="addressTotal" parameterType="ssg.com.houssg.dto.AccommodationParam" resultType="int">
	    SELECT COUNT(DISTINCT a.accom_number) AS total_count
	    FROM accommodation a
	    JOIN rooms ro ON a.accom_number = ro.accom_number
	    LEFT JOIN favorite f ON a.accom_number = f.accom_number
	    LEFT JOIN (
	        SELECT accom_number, COUNT(*) AS review_count, ROUND(AVG(review_rating), 1) AS avg_rating
	        FROM review
	        GROUP BY accom_number
	    ) r ON a.accom_number = r.accom_number
	    WHERE ((a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0) 
	    AND ((REPLACE(TRIM(a.accom_name), ' ', '%') LIKE CONCAT('%', REPLACE(TRIM(#{search}), ' ', '%'), '%'))
		OR (REPLACE(TRIM(a.accom_address), ' ', '%') LIKE CONCAT('%', REPLACE(TRIM(#{search}), ' ', '%'), '%')))
	</select>
		
	<select id="typeSearch" parameterType="ssg.com.houssg.dto.AccommodationParam" resultType="ssg.com.houssg.dto.AccommodationDto">
	    SELECT a.accom_number, a.accom_name, a.accom_address, a.tele_number, a.accom_category, a.accom_details, a.check_in, a.check_out, a.business_number, a.id AS owner_id, a.img,
	        MIN(ro.room_price) AS min_price, 
	        IFNULL(r.review_count, 0) AS review_count,
	        IFNULL(r.avg_rating, 0.0) AS avg_rating
	    FROM accommodation a
	    JOIN rooms ro ON a.accom_number = ro.accom_number
	    LEFT JOIN favorite f ON a.accom_number = f.accom_number
	    LEFT JOIN (
	        SELECT accom_number, COUNT(*) AS review_count, ROUND(AVG(review_rating), 1) AS avg_rating
	        FROM review
	        GROUP BY accom_number
	    ) r ON a.accom_number = r.accom_number
	    WHERE ((a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0)
	    AND (a.accom_category = #{type})
	    GROUP BY a.accom_number
	    <if test="select == '평점 높은순'">
	        ORDER BY avg_rating DESC
	    </if>
	    <if test="select == '최근 등록순'">
	        ORDER BY a.accom_number DESC
	    </if>
	    <if test="select == '금액 높은순'">
	        ORDER BY min_price DESC
	    </if>
	    <if test="select == '금액 낮은순'">
	        ORDER BY min_price ASC
	    </if>
	    LIMIT #{pageSize} OFFSET #{start}
	</select>
	
	<select id="typeTotal" parameterType="ssg.com.houssg.dto.AccommodationParam" resultType="int">
		SELECT COUNT(DISTINCT a.accom_number) AS total_count
		FROM accommodation a
	    JOIN rooms ro ON a.accom_number = ro.accom_number
	    LEFT JOIN favorite f ON a.accom_number = f.accom_number
	    LEFT JOIN (
	        SELECT accom_number, COUNT(*) AS review_count, ROUND(AVG(review_rating), 1) AS avg_rating
	        FROM review
	        GROUP BY accom_number
	    ) r ON a.accom_number = r.accom_number
	    WHERE ((a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0)
	    AND (a.accom_category = #{type})
	</select>

	<select id="search" parameterType="ssg.com.houssg.dto.AccommodationParam" resultType="ssg.com.houssg.dto.AccommodationDto">
	    SELECT a.accom_number, a.accom_name, a.accom_address, a.tele_number, a.accom_category, a.accom_details, a.check_in, a.check_out, a.business_number, a.id AS owner_id, a.img,
		    MIN(ro.room_price) AS min_price, 
		    IFNULL(r.review_count, 0) AS review_count,
		    IFNULL(r.avg_rating, 0.0) AS avg_rating
	    FROM accommodation a
	    JOIN rooms ro ON a.accom_number = ro.accom_number
		LEFT JOIN favorite f ON a.accom_number = f.accom_number
		LEFT JOIN (
		    SELECT accom_number, COUNT(*) AS review_count, ROUND(AVG(review_rating), 1) AS avg_rating
		    FROM review
		    GROUP BY accom_number
		) r ON a.accom_number = r.accom_number
		WHERE ((a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0)
		AND (a.accom_category = #{type})
		AND ((REPLACE(TRIM(a.accom_name), ' ', '%') LIKE CONCAT('%', REPLACE(TRIM(#{search}), ' ', '%'), '%'))
		OR REPLACE(TRIM(a.accom_address), ' ', '%') LIKE CONCAT('%', REPLACE(TRIM(#{search}), ' ', '%'), '%'))
		GROUP BY a.accom_number
		<if test="select == '평점 높은순'">
        	ORDER BY avg_rating DESC
	    </if>
	    <if test="select == '최근 등록순'">
	        ORDER BY a.accom_number DESC
	    </if>
	    <if test="select == '금액 높은순'">
	        ORDER BY min_price DESC
	    </if>
	    <if test="select == '금액 낮은순'">
	        ORDER BY min_price ASC
	    </if>
	    LIMIT #{pageSize} OFFSET #{start}
	</select>
	
	<select id="searchTotal" parameterType="ssg.com.houssg.dto.AccommodationParam" resultType="int">
		SELECT COUNT(DISTINCT a.accom_number) AS total_count
	    FROM accommodation a
	    JOIN rooms ro ON a.accom_number = ro.accom_number
		LEFT JOIN favorite f ON a.accom_number = f.accom_number
		LEFT JOIN (
		    SELECT accom_number, COUNT(*) AS review_count, ROUND(AVG(review_rating), 1) AS avg_rating
		    FROM review
		    GROUP BY accom_number
		) r ON a.accom_number = r.accom_number
		WHERE ((a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0)
		AND (a.accom_category = #{type})
		AND ((REPLACE(TRIM(a.accom_name), ' ', '%') LIKE CONCAT('%', REPLACE(TRIM(#{search}), ' ', '%'), '%'))
		OR REPLACE(TRIM(a.accom_address), ' ', '%') LIKE CONCAT('%', REPLACE(TRIM(#{search}), ' ', '%'), '%'))
	</select>
	
	<!-- (5) 숙소 등록 후 selectKey에 의해, autoIncrement된 accom_number 값이 반환됨 -->
	<insert id="insertAccommodation" parameterType="ssg.com.houssg.dto.AccommodationDto">
	    INSERT INTO accommodation (accom_name, accom_address, tele_number, accom_category, accom_details, check_in, check_out, business_number, id, auth, deletion_request, img, add_request)
	    VALUES (#{accomName}, #{accomAddress}, #{teleNumber}, #{accomCategory}, #{accomDetails}, #{checkIn}, #{checkOut}, #{businessNumber}, #{id}, 0, 0, #{img},1)
	    <selectKey keyProperty="accomNumber" resultType="int" order="AFTER">
	        SELECT LAST_INSERT_ID()
	    </selectKey>
	</insert>
	
	<select id="getMyAccom" parameterType="java.lang.String" resultType="ssg.com.houssg.dto.AccommodationDto">
		SELECT *
		FROM accommodation a
		JOIN facility f ON a.accom_number = f.accom_number
		JOIN user u ON a.id = u.id
		WHERE a.id=#{id} AND (a.deletion_request = 0 OR a.deletion_request = 1)
	</select>
	
	<update id="updateAccommodation" parameterType="ssg.com.houssg.dto.AccommodationDto">
        UPDATE accommodation
        SET
            tele_number = #{teleNumber},
            accom_details = #{accomDetails},
            check_in = #{checkIn},
            check_out = #{checkOut},
            img = #{img}
        WHERE
            accom_number = #{accomNumber}
    </update>

	<select id="getAccom" parameterType="int" resultType="ssg.com.houssg.dto.AccommodationDto">
		SELECT DISTINCT
		    a.accom_number,
		    a.accom_name,
		    a.accom_address,
		    a.tele_number,
		    a.accom_category,
		    a.accom_details,
		    a.check_in,
		    a.check_out,
		    a.business_number,
		    a.id AS owner_id,
		    a.img,
		    IFNULL(r.review_count, 0) AS review_count,
		    IFNULL(r.avg_rating, 0.0) AS avg_rating
		FROM accommodation a
		LEFT JOIN favorite f ON a.accom_number = f.accom_number
		LEFT JOIN (
		    SELECT accom_number, COUNT(*) AS review_count, FORMAT(AVG(review_rating), 1) AS avg_rating
		    FROM review
		    GROUP BY accom_number
		) r ON a.accom_number = r.accom_number
		WHERE a.accom_number = #{accomNumber}
		    AND (a.deletion_request = 0 OR a.deletion_request = 1)
		    AND add_request = 0;
	</select>
	
	<update id="updateRequest" parameterType="int">
		UPDATE accommodation
		SET deletion_request = 1
		WHERE accom_number = #{accomNumber} and deletion_request = 0
	</update>
	
	<update id="deleteRequest">
		UPDATE accommodation
		SET deletion_request = 2
		WHERE deletion_request = 1
	</update>
	
	<select id="getAllAccom" resultType="ssg.com.houssg.dto.AccommodationDto">
		SELECT a.accom_number, a.accom_name, a.accom_address, a.tele_number, a.accom_category, a.accom_details, a.check_in, a.check_out, a.business_number, a.id AS owner_id, a.img,
		    MIN(ro.room_price) AS min_price, 
		    IFNULL(r.review_count, 0) AS review_count,
		    IFNULL(r.avg_rating, 0.0) AS avg_rating
		FROM accommodation a
		JOIN rooms ro ON a.accom_number = ro.accom_number
		LEFT JOIN favorite f ON a.accom_number = f.accom_number
		LEFT JOIN (
		    SELECT accom_number, COUNT(*) AS review_count, FORMAT(AVG(review_rating), 1) AS avg_rating
		    FROM review
		    GROUP BY accom_number
		) r ON a.accom_number = r.accom_number
		WHERE (a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0 
		GROUP BY a.accom_number
		ORDER BY a.accom_number DESC
	</select>	
	
	<update id="accomApproval" parameterType="int">
		UPDATE accommodation
		SET add_request = 0
		WHERE accom_number = #{accomNumber} and add_request>0
	</update>
	
	<update id="accomApprovalX" parameterType="int">
		UPDATE accommodation
		SET add_request = 2
		WHERE accom_number = #{accomNumber} and add_request>0
	</update>
	
	<select id="getApprovalAccom" resultType="ssg.com.houssg.dto.AccommodationDto">
	    SELECT *
	    FROM accommodation a
	    JOIN facility f ON a.accom_number = f.accom_number
	    WHERE a.add_request = 1
	</select>
	
	<select id="getDeletionAccom" resultType="ssg.com.houssg.dto.AccommodationDto">
		SELECT *
		FROM accommodation a
		JOIN facility f ON a.accom_number = f.accom_number
		LEFT JOIN reservation r ON a.accom_number = r.accom_number
		WHERE a.deletion_request=1
	</select>
	
	<select id="accomScore" resultType="ssg.com.houssg.dto.AccommodationDto">
		SELECT a.accom_number, a.accom_name, a.accom_address, a.tele_number, a.accom_category, a.accom_details, a.check_in, a.check_out, a.business_number, a.id AS owner_id, a.img,
		    MIN(ro.room_price) AS min_price, 
		    IFNULL(r.review_count, 0) AS review_count,
		    IFNULL(r.avg_rating, 0.0) AS avg_rating
		FROM accommodation a
		JOIN rooms ro ON a.accom_number = ro.accom_number
		LEFT JOIN favorite f ON a.accom_number = f.accom_number
		LEFT JOIN (
		    SELECT accom_number, COUNT(*) AS review_count, FORMAT(AVG(review_rating), 1) AS avg_rating
		    FROM review
		    GROUP BY accom_number
		) r ON a.accom_number = r.accom_number
		WHERE (a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0
		GROUP BY a.accom_number
		ORDER BY avg_rating DESC	
	</select>
	
	<select id="accomScore20" resultType="ssg.com.houssg.dto.AccommodationDto">
	    SELECT a.accom_number, a.accom_name, a.accom_address, a.tele_number, a.accom_category, a.accom_details, a.check_in, a.check_out, a.business_number, a.id AS owner_id, a.img,
		    MIN(ro.room_price) AS min_price, 
		    IFNULL(r.review_count, 0) AS review_count,
		    IFNULL(r.avg_rating, 0.0) AS avg_rating
		FROM accommodation a
		JOIN rooms ro ON a.accom_number = ro.accom_number
		LEFT JOIN favorite f ON a.accom_number = f.accom_number
		LEFT JOIN (
		    SELECT accom_number, COUNT(*) AS review_count, FORMAT(AVG(review_rating), 1) AS avg_rating
		    FROM review
		    GROUP BY accom_number
		) r ON a.accom_number = r.accom_number
		WHERE (a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0
		GROUP BY a.accom_number
	    ORDER BY avg_rating DESC
	    LIMIT 20
	</select>
	
	<select id="newAccom20" resultType="ssg.com.houssg.dto.AccommodationDto">
		SELECT a.accom_number, a.accom_name, a.accom_address, a.tele_number, a.accom_category, a.accom_details, a.check_in, a.check_out, a.business_number, a.id AS owner_id, a.img,
        MIN(ro.room_price) AS min_price, 
        IFNULL(r.review_count, 0) AS review_count,
        IFNULL(r.avg_rating, 0.0) AS avg_rating
        FROM accommodation a
        JOIN rooms ro ON a.accom_number = ro.accom_number
        LEFT JOIN favorite f ON a.accom_number = f.accom_number
        LEFT JOIN (
            SELECT accom_number, COUNT(*) AS review_count, FORMAT(AVG(review_rating), 1) AS avg_rating
            FROM review
            GROUP BY accom_number
        ) r ON a.accom_number = r.accom_number
        WHERE (a.deletion_request = 0 OR a.deletion_request = 1) AND a.add_request = 0
        GROUP BY a.accom_number
        ORDER BY a.accom_number DESC
        LIMIT 20
	</select>
    
    <select id="choiceAccom" parameterType="int" resultType="ssg.com.houssg.dto.AccommodationDto">
    	SELECT *
		FROM accommodation
		WHERE accom_number = #{accom_number}    
    </select>
</mapper>

